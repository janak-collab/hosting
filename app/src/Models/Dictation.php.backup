<?php
namespace App\Models;

use App\Database\Connection;
use PDO;

class Dictation {
    private $db;
    
    public function __construct() {
        $this->db = Connection::getInstance()->getConnection();
    }
    
    /**
     * Get all active procedures with provider customizations
     */
    public function getActiveProcedures($providerId = null) {
        $sql = "SELECT 
                    p.id,
                    p.name,
                    p.category,
                    p.template_content,
                    p.default_billing_codes,
                    
                    
                    COALESCE(pp.custom_intro, p.template_content) as final_template,
                    pp.custom_intro,
                    pp.custom_closing
                FROM ASC_procedures p
                LEFT JOIN ASC_provider_procedures pp 
                    ON p.id = pp.procedure_id 
                    AND pp.provider_id = :provider_id
                WHERE 1=1
                ORDER BY p.category, p.name";
        
        $stmt = $this->db->prepare($sql);
        $stmt->execute(['provider_id' => $providerId]);
        
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
    
    /**
     * Get specific procedure with template
     */
    public function getProcedureById($id, $providerId = null) {
        $sql = "SELECT 
                    p.*,
                    COALESCE(pp.custom_intro, '') as custom_intro,
                    COALESCE(pp.custom_closing, '') as custom_closing
                FROM ASC_procedures p
                LEFT JOIN ASC_provider_procedures pp 
                    ON p.id = pp.procedure_id 
                    AND pp.provider_id = :provider_id
                WHERE p.id = :id";
        
        $stmt = $this->db->prepare($sql);
        $stmt->execute([
            'id' => $id,
            'provider_id' => $providerId
        ]);
        
        return $stmt->fetch(PDO::FETCH_ASSOC);
    }
    
    /**
     * Get billing codes for a procedure
     */
    public function getBillingCodes($procedureId) {
        $sql = "SELECT * FROM ASC_procedures_billing_codes 
                WHERE procedure_id = :procedure_id 
                ORDER BY display_order, cpt_code";
        
        $stmt = $this->db->prepare($sql);
        $stmt->execute(['procedure_id' => $procedureId]);
        
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
    
    /**
     * Create audit log entry with enhanced tracking
     */
    public function createAuditLog($data) {
        $sql = "INSERT INTO ASC_dictation_audit_log 
                (action, procedure_id, procedure_name, provider_id, provider_name, 
                 location, ip_address, user_agent, created_at, duration_seconds, 
                 dictation_count, metadata)
                VALUES 
                (:action, :procedure_id, :procedure_name, :provider_id, :provider_name,
                 :location, :ip_address, :user_agent, NOW(), :duration_seconds,
                 :dictation_count, :metadata)";
        
        try {
            $stmt = $this->db->prepare($sql);
            $stmt->execute([
                'action' => $data['action'],
                'procedure_id' => $data['procedure_id'] ?? null,
                'procedure_name' => $data['procedure_name'] ?? null,
                'provider_id' => $data['provider_id'] ?? null,
                'provider_name' => $data['provider_name'] ?? null,
                'location' => $data['location'] ?? null,
                'ip_address' => $_SERVER['REMOTE_ADDR'] ?? null,
                'user_agent' => $_SERVER['HTTP_USER_AGENT'] ?? null,
                'duration_seconds' => $data['duration_seconds'] ?? null,
                'dictation_count' => $data['dictation_count'] ?? null,
                'metadata' => isset($data['metadata']) ? json_encode($data['metadata']) : null
            ]);
            
            return true;
        } catch (\PDOException $e) {
            error_log("Audit log error: " . $e->getMessage());
            return false;
        }
    }
    
    /**
     * Get all providers
     */
    public function getProviders() {
        $sql = "SELECT id, name, active 
                FROM providers 
                WHERE active = 1 
                ORDER BY name";
        
        $stmt = $this->db->query($sql);
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
    
    /**
     * Get procedure categories
     */
    public function getCategories() {
        $sql = "SELECT DISTINCT category 
                FROM ASC_procedures 
                WHERE category IS NOT NULL 
                ORDER BY category";
        
        $stmt = $this->db->query($sql);
        return $stmt->fetchAll(PDO::FETCH_COLUMN);
    }
    
    /**
     * Get locations
     */
    public function getLocations() {
        return [
            'Catonsville',
            'Edgewater', 
            'Elkridge',
            'Glen Burnie',
            'Leonardtown',
            'Odenton',
            'Prince Frederick'
        ];
    }
    
    /**
     * Analytics: Get procedure usage by provider
     */
    public function getProcedureUsageByProvider($providerId, $dateRange = null) {
        $sql = "SELECT 
                    procedure_name,
                    COUNT(*) as usage_count,
                    AVG(duration_seconds) as avg_duration
                FROM ASC_dictation_audit_log
                WHERE provider_id = :provider_id
                AND action = 'print_dictation'";
        
        if ($dateRange) {
            $sql .= " AND created_at BETWEEN :start_date AND :end_date";
        }
        
        $sql .= " GROUP BY procedure_name
                  ORDER BY usage_count DESC";
        
        $stmt = $this->db->prepare($sql);
        $params = ['provider_id' => $providerId];
        
        if ($dateRange) {
            $params['start_date'] = $dateRange['start'];
            $params['end_date'] = $dateRange['end'];
        }
        
        $stmt->execute($params);
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
    
    /**
     * Analytics: Get average time per dictation
     */
    public function getAverageTimePerDictation($providerId = null) {
        $sql = "SELECT 
                    AVG(duration_seconds) as avg_duration,
                    MIN(duration_seconds) as min_duration,
                    MAX(duration_seconds) as max_duration,
                    COUNT(*) as total_dictations
                FROM ASC_dictation_audit_log
                WHERE action = 'print_dictation'
                AND duration_seconds IS NOT NULL";
        
        if ($providerId) {
            $sql .= " AND provider_id = :provider_id";
        }
        
        $stmt = $this->db->prepare($sql);
        $params = $providerId ? ['provider_id' => $providerId] : [];
        $stmt->execute($params);
        
        return $stmt->fetch(PDO::FETCH_ASSOC);
    }
    
    /**
     * Analytics: Get session statistics
     */
    public function getSessionStats($providerId = null, $dateRange = null) {
        $sql = "SELECT 
                    COUNT(DISTINCT DATE(created_at)) as total_days,
                    COUNT(CASE WHEN action = 'session_start' THEN 1 END) as total_sessions,
                    SUM(CASE WHEN action = 'session_end' THEN dictation_count ELSE 0 END) as total_dictations,
                    AVG(CASE WHEN action = 'session_end' THEN dictation_count ELSE NULL END) as avg_per_session
                FROM ASC_dictation_audit_log
                WHERE 1=1";
        
        if ($providerId) {
            $sql .= " AND provider_id = :provider_id";
        }
        
        if ($dateRange) {
            $sql .= " AND created_at BETWEEN :start_date AND :end_date";
        }
        
        $stmt = $this->db->prepare($sql);
        $params = [];
        
        if ($providerId) {
            $params['provider_id'] = $providerId;
        }
        
        if ($dateRange) {
            $params['start_date'] = $dateRange['start'];
            $params['end_date'] = $dateRange['end'];
        }
        
        $stmt->execute($params);
        return $stmt->fetch(PDO::FETCH_ASSOC);
    }
}
