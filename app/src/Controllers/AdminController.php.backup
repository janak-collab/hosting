<?php
namespace App\Controllers;

use App\Models\ITTicket;
use App\Models\PhoneNote;
use App\Services\Logger;

class AdminController extends BaseController {
    
    /**
     * Admin dashboard/index - redirects based on auth status
     */
    public function index() {
        // Check if logged in
        if (!$this->isAdminAuthenticated()) {
            return $this->redirect('/admin/login');
        }

        // Redirect to tickets dashboard
        return $this->redirect('/admin/tickets');
    }
    
    /**
     * Alias for index()
     */
    public function dashboard() {
        return $this->index();
    }
    
    /**
     * Show admin login form
     */
    public function showLogin() {
        // If already logged in, redirect to dashboard
        if ($this->isAdminAuthenticated()) {
            return $this->redirect('/admin/tickets');
        }
        
        // Check for login error in session
        $error = $_SESSION['login_error'] ?? null;
        unset($_SESSION['login_error']);
        
        // Show login form
        return $this->view('admin.login', compact('error'));
    }
    
    /**
     * Alias for showLogin()
     */
    public function login() {
        return $this->showLogin();
    }
    
    /**
     * Handle admin login form submission
     */
    public function handleLogin() {
        // Validate CSRF token
        if (!isset($_POST['csrf_token']) || 
!hash_equals($_SESSION['csrf_token'], $_POST['csrf_token'])) {
            $_SESSION['login_error'] = 'Invalid security token. Please try 
again.';
            return $this->redirect('/admin/login');
        }
        
        // Get credentials
        $username = $_POST['username'] ?? '';
        $password = $_POST['password'] ?? '';
        
        // Validate credentials
        if ($this->validateAdminCredentials($username, $password)) {
            // Set session variables
            $_SESSION['admin_logged_in'] = true;
            $_SESSION['admin_username'] = $username;
            $_SESSION['admin_login_time'] = time();
            
            // Log successful login
            Logger::channel('admin')->info('Admin login successful', [
                'username' => $username,
                'ip' => $_SERVER['REMOTE_ADDR']
            ]);
            
            // Redirect to dashboard
            return $this->redirect('/admin/tickets');
        } else {
            // Log failed attempt
            Logger::channel('security')->warning('Failed admin login attempt', 
[
                'username' => $username,
                'ip' => $_SERVER['REMOTE_ADDR']
            ]);
            
            // Set error and redirect back
            $_SESSION['login_error'] = 'Invalid username or password.';
            return $this->redirect('/admin/login');
        }
    }
    
    /**
     * Handle admin logout
     */
    public function logout() {
        // Log logout
        if (isset($_SESSION['admin_username'])) {
            Logger::channel('admin')->info('Admin logout', [
                'username' => $_SESSION['admin_username']
            ]);
        }
        
        // Clear admin session variables
        unset($_SESSION['admin_logged_in']);
        unset($_SESSION['admin_username']);
        unset($_SESSION['admin_login_time']);
        
        // Redirect to login
        return $this->redirect('/admin/login');
    }
    
    /**
     * Show admin tickets panel
     */
    public function tickets() {
        $this->requireAdmin();
        
        // Delegate to ITSupportController
        $controller = new ITSupportController();
        return $controller->showAdminPanel();
    }
    
    /**
     * List phone notes
     */
    public function phoneNotes() {
        $this->requireAdmin();
        
        // Delegate to PhoneNoteController
        $controller = new PhoneNoteController();
        return $controller->listNotes();
    }
    
    /**
     * View specific phone note
     */
    public function viewPhoneNote($id) {
        $this->requireAdmin();
        
        // Validate ID
        if (!is_numeric($id) || $id < 1) {
            return $this->abort(404, 'Invalid phone note ID');
        }
        
        // Delegate to PhoneNoteController
        $controller = new PhoneNoteController();
        return $controller->viewNote($id);
    }
    
    /**
     * Print phone note
     */
    public function printPhoneNote($id) {
        $this->requireAdmin();
        
        // Validate ID
        if (!is_numeric($id) || $id < 1) {
            return $this->abort(404, 'Invalid phone note ID');
        }
        
        // Delegate to PhoneNoteController
        $controller = new PhoneNoteController();
        return $controller->printNote($id);
    }
    
    /**
     * Generate PDF for phone note
     */
    public function generatePhoneNotePDF($id) {
        $this->requireAdmin();
        
        // Validate ID
        if (!is_numeric($id) || $id < 1) {
            return $this->abort(404, 'Invalid phone note ID');
        }
        
        // Delegate to PhoneNoteController
        $controller = new PhoneNoteController();
        return $controller->generatePDF($id);
    }
    
    /**
     * Admin overview page with statistics
     */
    public function overview() {
        $this->requireAdmin();
        
        try {
            // Get statistics
            $ticketModel = new ITTicket();
            $phoneNoteModel = new PhoneNote();
            
            $stats = [
                'open_tickets' => $ticketModel->getOpenTicketsCount(),
                'pending_tickets' => $ticketModel->getPendingTicketsCount(),
                'closed_tickets_today' => 
$ticketModel->getClosedTicketsTodayCount(),
                'total_phone_notes' => $phoneNoteModel->getTotalCount(),
                'phone_notes_today' => $phoneNoteModel->getTodayCount(),
                'urgent_items' => $ticketModel->getUrgentItemsCount()
            ];
            
            // Get recent activity
            $recentActivity = [
                'tickets' => $ticketModel->getRecentTickets(5),
                'phone_notes' => $phoneNoteModel->getRecentNotes(5)
            ];
            
            return $this->view('admin.overview', compact('stats', 
'recentActivity'));
            
        } catch (\Exception $e) {
            Logger::channel('error')->error('Failed to load admin overview', [
                'error' => $e->getMessage()
            ]);
            
            // Fall back to tickets view
            return $this->redirect('/admin/tickets');
        }
    }
    
    // 
// =========================================================================
    // Private Helper Methods
    // 
// =========================================================================
    
    /**
     * Check if admin is authenticated
     */
    private function isAdminAuthenticated() {
        return isset($_SESSION['admin_logged_in']) && 
$_SESSION['admin_logged_in'] === true;
    }
    
    /**
     * Require admin authentication
     */
    private function requireAdmin() {
        if (!$this->isAdminAuthenticated()) {
            // Store intended URL for redirect after login
            $_SESSION['intended_url'] = $_SERVER['REQUEST_URI'];
            return $this->redirect('/admin/login');
        }
        
        // Check session timeout (2 hours)
        if (isset($_SESSION['admin_login_time'])) {
            $sessionLifetime = 7200; // 2 hours
            if (time() - $_SESSION['admin_login_time'] > $sessionLifetime) {
                Logger::channel('security')->info('Admin session expired', [
                    'username' => $_SESSION['admin_username'] ?? 'Unknown'
                ]);
                $this->logout();
            } else {
                // Update activity time
                $_SESSION['admin_login_time'] = time();
            }
        }
    }
    
    /**
     * Validate admin credentials
     */
    private function validateAdminCredentials($username, $password) {
        // Check if admin config exists
        $adminConfigFile = CONFIG_PATH . '/admin.php';
        if (!file_exists($adminConfigFile)) {
            // Fall back to environment variables
            $validUsername = $_ENV['ADMIN_USERNAME'] ?? 'admin';
            $validPasswordHash = $_ENV['ADMIN_PASSWORD_HASH'] ?? 
password_hash('GMPMAdmin2025!', PASSWORD_DEFAULT);
            
            return $username === $validUsername && password_verify($password, 
$validPasswordHash);
        }
        
        // Load admin config
        $adminConfig = require $adminConfigFile;
        
        // Check if user exists
        if (!isset($adminConfig['users'][$username])) {
            return false;
        }
        
        $user = $adminConfig['users'][$username];
        
        // Check if user is active
        if (!$user['active']) {
            return false;
        }
        
        // Verify password
        return password_verify($password, $user['password_hash']);
    }
}
