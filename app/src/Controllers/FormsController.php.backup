<?php
namespace App\Controllers;

class FormsController {
    
    private $formCategories = [
        'patient' => [
            'title' => 'Patient Forms',
            'icon' => '👥',
            'forms' => [
                'new-patient' => 'New Patient Registration',
                'patient-update' => 'Update Patient Information',
                'consent-general' => 'General Consent',
                'consent-procedure' => 'Procedure Consent',
                'family-release' => 'Family/HIPAA Release',
                'discharge' => 'Patient Discharge'
            ]
        ],
        'clinical' => [
            'title' => 'Clinical Forms',
            'icon' => '⚕️',
            'forms' => [
                'injection-note' => 'Injection Documentation',
                'procedure-note' => 'Procedure Note',
                'radiology-order' => 'Radiology Request',
                'lab-order' => 'Laboratory Order',
                'dme-order' => 'DME Order',
                'hep' => 'Home Exercise Program'
            ]
        ],
        'billing' => [
            'title' => 'Billing Forms',
            'icon' => '💰',
            'forms' => [
                'payment-receipt' => 'Payment Receipt',
                'abn' => 'Advanced Beneficiary Notice',
                'hardship-letter' => 'Financial Hardship Letter',
                'cash-price' => 'Cash Price List'
            ]
        ],
        'referrals' => [
            'title' => 'Referrals',
            'icon' => '🔄',
            'forms' => [
                'specialty-referral' => 'Specialty Referral',
                'pt-referral' => 'Physical Therapy Order',
                'work-note' => 'Work/Disability Note',
                'fce-request' => 'FCE Request',
                'lmn' => 'Letter of Medical Necessity'
            ]
        ],
        'surgery' => [
            'title' => 'Surgery Center',
            'icon' => '🏥',
            'forms' => [
                'pre-op-packet' => 'Pre-Op Packet',
                'hp-patient' => 'H&P (Patient Version)',
                'hp-physician' => 'H&P (Physician Version)',
                'post-op-survey' => 'Post-Procedure Survey',
                'ama-form' => 'AMA Form'
            ]
        ]
    ];
    
    public function index($category = null) {
        if ($category && !isset($this->formCategories[$category])) {
            header('Location: /forms');
            exit;
        }
        
        $categories = $this->formCategories;
        $selectedCategory = $category;
        
        require_once APP_PATH . '/templates/views/forms/index.php';
    }
    
    public function showForm($category, $formType) {
        if (!isset($this->formCategories[$category]['forms'][$formType])) {
            header('Location: /forms');
            exit;
        }
        
        $formTitle = $this->formCategories[$category]['forms'][$formType];
        $formPath = APP_PATH . "/templates/views/forms/{$category}/{$formType}.php";
        
        if (!file_exists($formPath)) {
            $this->createPlaceholderForm($category, $formType, $formTitle);
        }
        
        require_once $formPath;
    }
    
    public function submitForm() {
        header('Content-Type: application/json');
        
        if (!$this->verifyCSRF($_POST['csrf_token'] ?? '')) {
            echo json_encode(['success' => false, 'message' => 'Invalid security token']);
            exit;
        }
        
        $formType = $_POST['form_type'] ?? '';
        $category = $_POST['form_category'] ?? '';
        
        $result = $this->processForm($category, $formType, $_POST);
        
        echo json_encode($result);
    }
    
    public function search() {
        header('Content-Type: application/json');
        
        $query = strtolower($_GET['q'] ?? '');
        $results = [];
        
        if (strlen($query) >= 2) {
            foreach ($this->formCategories as $catKey => $category) {
                foreach ($category['forms'] as $formKey => $formName) {
                    if (strpos(strtolower($formName), $query) !== false) {
                        $results[] = [
                            'title' => $formName,
                            'category' => $category['title'],
                            'url' => "/forms/{$catKey}/{$formKey}",
                            'icon' => $category['icon']
                        ];
                    }
                }
            }
        }
        
        echo json_encode(['results' => $results]);
    }
    
    private function createPlaceholderForm($category, $formType, $formTitle) {
        $formPath = APP_PATH . "/templates/views/forms/{$category}/{$formType}.php";
        $dir = dirname($formPath);
        
        if (!is_dir($dir)) {
            mkdir($dir, 0755, true);
        }
        
        $placeholder = <<<PHP
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{$formTitle} - GMPM</title>
    <link rel="stylesheet" href="/assets/css/form-styles.css">
</head>
<body>
    <div class="container">
        <div class="form-card">
            <div class="form-header">
                <h1>{$formTitle}</h1>
                <p>This form is being updated to our new system</p>
            </div>
            
            <div class="form-content">
                <div class="info-box">
                    <strong>Coming Soon!</strong> This form is currently being migrated to our new digital system.
                    <br><br>
                    In the meantime, please contact the front desk for a paper copy.
                </div>
                
                <div class="form-actions">
                    <a href="/forms/{$category}" class="btn btn-secondary">← Back to {$this->formCategories[$category]['title']}</a>
                    <a href="/" class="btn btn-primary">Return to Dashboard</a>
                </div>
            </div>
        </div>
    </div>
</body>
</html>
PHP;
        
        file_put_contents($formPath, $placeholder);
        chmod($formPath, 0644);
    }
    
    private function processForm($category, $formType, $data) {
        $this->createFormsTable();
        
        try {
            $db = \App\Database\Connection::getInstance()->getConnection();
            
            $sql = "INSERT INTO form_submissions (
                form_category, form_type, form_data, submitted_by, 
                submitted_at, ip_address, status
            ) VALUES (
                :category, :type, :data, :user,
                NOW(), :ip, 'pending'
            )";
            
            $stmt = $db->prepare($sql);
            $stmt->execute([
                ':category' => $category,
                ':type' => $formType,
                ':data' => json_encode($data),
                ':user' => $_SERVER['PHP_AUTH_USER'] ?? 'Unknown',
                ':ip' => $_SERVER['REMOTE_ADDR']
            ]);
            
            return [
                'success' => true,
                'message' => 'Form submitted successfully',
                'id' => $db->lastInsertId()
            ];
            
        } catch (\Exception $e) {
            error_log("Form submission error: " . $e->getMessage());
            return [
                'success' => false,
                'message' => 'An error occurred while submitting the form'
            ];
        }
    }
    
    private function createFormsTable() {
        try {
            $db = \App\Database\Connection::getInstance()->getConnection();
            
            $sql = "CREATE TABLE IF NOT EXISTS form_submissions (
                id INT AUTO_INCREMENT PRIMARY KEY,
                form_category VARCHAR(50) NOT NULL,
                form_type VARCHAR(50) NOT NULL,
                form_data JSON,
                submitted_by VARCHAR(100),
                submitted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                ip_address VARCHAR(45),
                status ENUM('pending', 'processed', 'archived') DEFAULT 'pending',
                INDEX idx_category_type (form_category, form_type),
                INDEX idx_submitted_at (submitted_at),
                INDEX idx_status (status)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4";
            
            $db->exec($sql);
        } catch (\Exception $e) {
            error_log("Error creating forms table: " . $e->getMessage());
        }
    }
    
    private function verifyCSRF($token) {
        return isset($_SESSION['csrf_token']) && hash_equals($_SESSION['csrf_token'], $token);
    }
}d 
~/app/src/Controllers

