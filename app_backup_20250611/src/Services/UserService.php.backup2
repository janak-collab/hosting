<?php
namespace App\Services;

use App\Models\User;
use App\Models\UserAuditLog;

class UserService {
    private $userModel;
    private $auditLog;
    private $htpasswdService;
    
    public function __construct() {
        $this->userModel = new User();
        $this->auditLog = new UserAuditLog();
        $this->htpasswdService = new HtpasswdService();
    }
    
    /**
     * Create a new user (both in DB and htpasswd)
     */
    public function createUser($data, $password, $createdBy = null) {
        try {
            // Validate password
            if (!$this->validatePassword($password)) {
                throw new \Exception('Password does not meet requirements');
            }
            
            // Check if username already exists
            if ($this->userModel->usernameExists($data['username'])) {
                throw new \Exception('Username already exists');
            }
            
            // Add created_by
            $data['created_by'] = $createdBy ?: ($_SESSION['user_id'] ?? null);
            
            // Create user in database
            $userId = $this->userModel->create($data);
            if (!$userId) {
                throw new \Exception('Failed to create user in database');
            }
            
            // Add to htpasswd
            if (!$this->htpasswdService->addUser($data['username'], $password)) {
                // Rollback database creation
                $this->userModel->softDelete($userId);
                throw new \Exception('Failed to create user in htpasswd');
            }
            
            // Log the action
            $this->auditLog->log($userId, 'created', null, $data['role'], $createdBy);
            
            return $userId;
            
        } catch (\Exception $e) {
            error_log("User creation failed: " . $e->getMessage());
            throw $e;
        }
    }
    
    /**
     * Update user information
     */
    public function updateUser($userId, $data, $newPassword = null, $updatedBy = null) {
        try {
            // Get current user data for audit log
            $currentUser = $this->userModel->getById($userId);
            if (!$currentUser) {
                throw new \Exception('User not found');
            }
            
            // Check if role is changing
            $roleChanged = isset($data['role']) && $data['role'] !== $currentUser['role'];
            
            // Update user in database
            if (!$this->userModel->update($userId, $data)) {
                throw new \Exception('Failed to update user in database');
            }
            
            // Update password if provided
            if ($newPassword) {
                if (!$this->validatePassword($newPassword)) {
                    throw new \Exception('Password does not meet requirements');
                }
                
                if (!$this->htpasswdService->updatePassword($currentUser['username'], $newPassword)) {
                    throw new \Exception('Failed to update password in htpasswd');
                }
                
                $this->auditLog->log($userId, 'password_changed', null, null, $updatedBy);
            }
            
            // Log role change if applicable
            if ($roleChanged) {
                $this->auditLog->log($userId, 'role_changed', $currentUser['role'], $data['role'], $updatedBy);
            } else {
                $this->auditLog->log($userId, 'updated', null, null, $updatedBy);
            }
            
            return true;
            
        } catch (\Exception $e) {
            error_log("User update failed: " . $e->getMessage());
            throw $e;
        }
    }
    
    /**
     * Delete user (soft delete in DB, disable in htpasswd)
     */
    public function deleteUser($userId, $deletedBy = null) {
        try {
            $user = $this->userModel->getById($userId);
            if (!$user) {
                throw new \Exception('User not found');
            }
            
            // Soft delete in database
            if (!$this->userModel->softDelete($userId)) {
                throw new \Exception('Failed to delete user from database');
            }
            
            // Disable in htpasswd
            if (!$this->htpasswdService->removeUser($user['username'])) {
                // Log warning but don't fail
                error_log("Warning: Failed to disable user {$user['username']} in htpasswd");
            }
            
            // Log the action
            $this->auditLog->log($userId, 'deleted', null, null, $deletedBy);
            
            return true;
            
        } catch (\Exception $e) {
            error_log("User deletion failed: " . $e->getMessage());
            throw $e;
        }
    }
    
    /**
     * Validate password against policy
     */
    public function validatePassword($password) {
        // At least 12 characters
        if (strlen($password) < 12) {
            return false;
        }
        
        // At least one uppercase
        if (!preg_match('/[A-Z]/', $password)) {
            return false;
        }
        
        // At least one lowercase
        if (!preg_match('/[a-z]/', $password)) {
            return false;
        }
        
        // At least one number
        if (!preg_match('/[0-9]/', $password)) {
            return false;
        }
        
        // At least one special character
        if (!preg_match('/[^A-Za-z0-9]/', $password)) {
            return false;
        }
        
        return true;
    }
    
    /**
     * Sync users from htpasswd to database
     */
    public function syncFromHtpasswd() {
        $htpasswdUsers = $this->htpasswdService->getAllUsers();
        $imported = 0;
        $skipped = 0;
        
        foreach ($htpasswdUsers as $username) {
            if (!$this->userModel->usernameExists($username)) {
                $data = [
                    'username' => $username,
                    'full_name' => ucfirst($username),
                    'role' => 'user',
                    'is_active' => 1,
                    'notes' => 'Imported from htpasswd',
                    'created_by' => $_SESSION['user_id'] ?? null
                ];
                
                $userId = $this->userModel->create($data);
                if ($userId) {
                    $this->auditLog->log($userId, 'created', null, 'Imported from htpasswd');
                    $imported++;
                }
            } else {
                $skipped++;
            }
        }
        
        return ['imported' => $imported, 'skipped' => $skipped];
    }
    
    /**
     * Unlock a user account
     */
    public function unlockUser($userId, $unlockedBy = null) {
        $user = $this->userModel->getById($userId);
        if (!$user) {
            throw new \Exception('User not found');
        }
        
        if ($this->userModel->unlock($userId)) {
            $this->auditLog->log($userId, 'unlocked', null, null, $unlockedBy);
            return true;
        }
        
        return false;
    }
    
    /**
     * Get password requirements for display
     */
    public function getPasswordRequirements() {
        return [
            'At least 12 characters',
            'At least one uppercase letter',
            'At least one lowercase letter',
            'At least one number',
            'At least one special character'
        ];
    }
}
