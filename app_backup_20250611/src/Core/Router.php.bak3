<?php
namespace App\Core;

class Router {
    private $routes = [];
    private $middlewareGroups = [];
    private $currentMiddleware = [];
    
    /**
     * Add a GET route
     */
    public function get($path, $handler) {
        return $this->addRoute('GET', $path, $handler);
    }
    
    /**
     * Add a POST route
     */
    public function post($path, $handler) {
        return $this->addRoute('POST', $path, $handler);
    }
    
    /**
     * Add a PUT route
     */
    public function put($path, $handler) {
        return $this->addRoute('PUT', $path, $handler);
    }
    
    /**
     * Add a DELETE route
     */
    public function delete($path, $handler) {
        return $this->addRoute('DELETE', $path, $handler);
    }
    
    /**
     * Add a route with any method
     */
    public function any($path, $handler) {
        return $this->addRoute('ANY', $path, $handler);
    }
    
    /**
     * Add a route
     */
    private function addRoute($method, $path, $handler) {
        $route = [
            'method' => $method,
            'path' => $path,
            'handler' => $handler,
            'middleware' => $this->currentMiddleware
        ];
        
        $this->routes[] = $route;
        
        // Return route for chaining
        return new class($route, $this) {
            private $route;
            private $router;
            
            public function __construct(&$route, $router) {
                $this->route = &$route;
                $this->router = $router;
            }
            
            public function middleware($middleware) {
                if (is_array($middleware)) {
                    $this->route['middleware'] = array_merge($this->route['middleware'], $middleware);
                } else {
                    $this->route['middleware'][] = $middleware;
                }
                return $this;
            }
            
            public function name($name) {
                $this->route['name'] = $name;
                return $this;
            }
        };
    }
    
    /**
     * Group routes with shared attributes
     */
    public function group($attributes, $callback) {
        $previousMiddleware = $this->currentMiddleware;
        
        // Apply group middleware
        if (isset($attributes['middleware'])) {
            $middleware = is_array($attributes['middleware']) ? $attributes['middleware'] : [$attributes['middleware']];
            $this->currentMiddleware = array_merge($this->currentMiddleware, $middleware);
        }
        
        // Execute the group callback
        $callback($this);
        
        // Restore previous middleware
        $this->currentMiddleware = $previousMiddleware;
    }
    
    /**
     * Define middleware group
     */
    public function middlewareGroup($name, $middleware) {
        $this->middlewareGroups[$name] = $middleware;
    }
    
    /**
     * Dispatch the request
     */
    public function dispatch($method, $uri) {
        error_log("GMPM Router: Total routes registered: " . count($this->routes));
        // Normalize URI
        $uri = rtrim($uri, '/') ?: '/';
        
        // Find matching route
        foreach ($this->routes as $route) {
            error_log("GMPM Router: Checking route " . $route["method"] . " " . $route["path"] . " against " . $method . " " . $uri);
            if ($this->matchRoute($route, $method, $uri, $params)) {
                error_log("GMPM Router: Route matched! Calling handleRoute");
                return $this->handleRoute($route, $params);
            }
        }
        
        // No route found
        $this->handleNotFound();
    }
    
    /**
     * Check if route matches request
     */
    private function matchRoute($route, $method, $uri, &$params) {
        // Check method
        if ($route['method'] !== 'ANY' && $route['method'] !== $method) {
            return false;
        }
        
        // Convert route pattern to regex
        $pattern = $route['path'];
        $pattern = preg_replace('/\{([a-zA-Z0-9_]+)\}/', '(?P<$1>[^/]+)', $pattern);
        $pattern = '#^' . $pattern . '$#';
        
        // Check if URI matches
        if (preg_match($pattern, $uri, $matches)) {
            // Extract parameters
            $params = [];
            foreach ($matches as $key => $value) {
                if (is_string($key)) {
                    $params[$key] = $value;
                }
            }
            return true;
        }
        
        return false;
    }
    
    /**
     * Handle the matched route
     */
    private function handleRoute($route, $params) {
        error_log("GMPM Router: handleRoute called for path: " . $route["path"]);
        // Run middleware
        $middleware = $this->resolveMiddleware($route['middleware']);
        
        $next = function() use ($route, $params) {
            return $this->callHandler($route['handler'], $params);
        };
        
        // Execute middleware chain
        foreach (array_reverse($middleware) as $mw) {
            $next = function() use ($mw, $next, $params) {
                return $this->callMiddleware($mw, $params, $next);
            };
        }
        
        return $next();
    }
    
    /**
     * Resolve middleware names to classes
     */
    private function resolveMiddleware($middleware) {
        $resolved = [];
        
        foreach ($middleware as $mw) {
            if (isset($this->middlewareGroups[$mw])) {
                $resolved = array_merge($resolved, $this->middlewareGroups[$mw]);
            } else {
                $resolved[] = $mw;
            }
        }
        
        return $resolved;
    }
    
    /**
     * Call middleware
     */
    private function callMiddleware($middleware, $params, $next) {
        // Resolve middleware class
        if (is_string($middleware)) {
            $middleware = $this->resolveMiddlewareClass($middleware);
        }
        
        // Call handle method
        return $middleware->handle($params, $next);
    }
    
    /**
     * Resolve middleware class from string
     */
    private function resolveMiddlewareClass($middleware) {
        $aliases = [
            'auth' => \App\Middleware\Auth::class,
            'admin' => \App\Middleware\AdminAuth::class,
            'csrf' => \App\Middleware\CsrfProtection::class,
            'throttle' => \App\Middleware\RateLimit::class,
            'ip' => \App\Middleware\IpWhitelist::class,
        ];
        
        $class = $aliases[$middleware] ?? $middleware;
        
        if (!class_exists($class)) {
            throw new \Exception("Middleware class not found: $class");
        }
        
        return new $class();
    }
    
    /**
     * Call the route handler
     */
    private function callHandler($handler, $params) {
        error_log("GMPM Router: callHandler called with handler type: " . gettype($handler));
        // String format: Controller@method
        if (is_string($handler) && strpos($handler, '@') !== false) {
            [$controller, $method] = explode('@', $handler);
            error_log("GMPM Router: Handler split into controller: " . $controller . " and method: " . $method);
            $controller = "\\App\\Controllers\\$controller";
            
            error_log("GMPM Router: Checking if class exists: " . $controller);
            if (!class_exists($controller)) {
                throw new \Exception("Controller not found: $controller");
            }
            
            $instance = new $controller();
            error_log("GMPM Router: Controller instantiated: " . $controller);
            
            if (!method_exists($instance, $method)) {
                throw new \Exception("Method not found: $controller::$method");
            }
            
            error_log("GMPM Router: Calling method: " . $controller . "::" . $method);
            return call_user_func_array([$instance, $method], $params);
        }
        
        // Closure
        if (is_callable($handler)) {
            error_log("GMPM Router: Calling method: " . $controller . "::" . $method);
            return call_user_func_array($handler, $params);
        }
        
        throw new \Exception("Invalid route handler");
    }
    
    /**
     * Handle 404
     */
    private function handleNotFound() {
        http_response_code(404);
        
        if (file_exists(RESOURCE_PATH . '/views/errors/404.php')) {
            include RESOURCE_PATH . '/views/errors/404.php';
        } else {
            echo "404 - Not Found";
        }
        
        exit;
    }
}
