#!/bin/bash
# GMPM Utility Script - Consolidates all management functions

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Configuration
BACKUP_DIR="$HOME/backups"
DB_NAME="gmpmus_gmpm"
DB_USER="gmpmus_gmpmuser"
DAYS_TO_KEEP=7

# Load environment variables if .env exists
if [ -f "$HOME/app/.env" ]; then
    export $(grep -v '^#' "$HOME/app/.env" | xargs)
fi

# Function to display usage
usage() {
    echo "GMPM Management Utility"
    echo "Usage: gmpm [command]"
    echo ""
    echo "Commands:"
    echo "  status    - Check system status"
    echo "  monitor   - Live monitoring mode"
    echo "  backup    - Backup database and files"
    echo "  sync      - Sync to GitHub"
    echo "  logs      - View recent error logs"
    echo "  routes    - List all routes"
    echo "  help      - Show this help"
}

# Status check function
check_status() {
    echo "=== GMPM System Status ==="
    echo -n "Portal: "
    curl -s -o /dev/null -w "%{http_code}" https://gmpm.us/ && echo -e " ${GREEN}âœ“${NC}" || echo -e " ${RED}âœ—${NC}"
    
    echo -n "API Status: "
    curl -s https://gmpm.us/status | jq -r .status 2>/dev/null || echo "Error"
    
    echo -n "PHP Errors: "
    if [ -f ~/logs/php_errors.log ]; then
        errors=$(tail -10 ~/logs/php_errors.log | grep -c "error\|Error\|ERROR" || true)
        if [ "$errors" -gt 0 ]; then
            echo -e "${RED}Found $errors recent errors${NC}"
        else
            echo -e "${GREEN}None recent${NC}"
        fi
    else
        echo "Log file not found"
    fi
    
    echo -n "Disk Usage: "
    df -h ~ | tail -1 | awk '{print $5 " used"}'
}

# Monitor function
monitor_system() {
    echo "ðŸ“Š GMPM Portal - Live Monitor"
    echo "============================="
    echo "Press Ctrl+C to exit"
    
    while true; do
        clear
        check_status
        echo ""
        echo "Recent Errors:"
        if [ -f ~/logs/php_errors.log ]; then
            tail -5 ~/logs/php_errors.log | grep -E "error|Error|ERROR" || echo "No recent errors"
        fi
        sleep 30
    done
}

# Backup function
backup_system() {
    echo "=== Starting GMPM Backup ==="
    
    # Get database password
    read -sp "Enter database password: " DB_PASS
    echo ""
    
    # Create backup directory
    mkdir -p "$BACKUP_DIR"
    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    
    # Backup database
    echo "Backing up database..."
    mysqldump -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" > "$BACKUP_DIR/gmpm_database_${TIMESTAMP}.sql"
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}âœ“ Database backup successful${NC}"
    else
        echo -e "${RED}âœ— Database backup failed${NC}"
        exit 1
    fi
    
    # Create complete backup
    echo "Creating complete backup..."
    cd "$HOME"
    tar -czf "$BACKUP_DIR/gmpm_complete_${TIMESTAMP}.tar.gz" \
        --exclude='app/vendor' \
        --exclude='storage/logs/*.log' \
        --exclude='public_html/error_log' \
        public_html app storage .htpasswds \
        "$BACKUP_DIR/gmpm_database_${TIMESTAMP}.sql"
    
    # Clean up temp database file
    rm "$BACKUP_DIR/gmpm_database_${TIMESTAMP}.sql"
    
    # Clean up old backups
    echo "Cleaning up old backups..."
    find "$BACKUP_DIR" -name "gmpm_complete_*.tar.gz" -mtime +$DAYS_TO_KEEP -delete
    
    echo -e "${GREEN}Backup completed: gmpm_complete_${TIMESTAMP}.tar.gz${NC}"
}

# Sync to GitHub function
sync_github() {
    echo "=== Syncing to GitHub ==="
    
    # Move to repo root
    cd ~ || exit 1
    
    # Stage all changes
    git add -A
    
    # Commit with timestamp
    COMMIT_MSG="Auto-sync on $(date '+%Y-%m-%d %H:%M:%S')"
    if git commit -m "$COMMIT_MSG"; then
        echo -e "${GREEN}âœ“ Changes committed${NC}"
    else
        echo -e "${GREEN}âœ“ No changes to commit${NC}"
    fi
    
    # Push to GitHub
    if git push origin main; then
        echo -e "${GREEN}âœ“ Successfully pushed to GitHub${NC}"
    else
        echo -e "${RED}âœ— Failed to push to GitHub${NC}"
        exit 1
    fi
}

# View logs function
view_logs() {
    echo "=== Recent Error Logs ==="
    if [ -f ~/logs/php_errors.log ]; then
        tail -50 ~/logs/php_errors.log | grep -E "error|Error|ERROR|Fatal|Warning" || echo "No errors found"
    else
        echo "Error log not found"
    fi
}

# List routes function
list_routes() {
    echo "=== GMPM Routes ==="
    if [ -f ~/app/src/Router.php ]; then
        grep -E "addRoute|'GET'|'POST'" ~/app/src/Router.php | grep -v "//" | sed 's/^[ \t]*//'
    else
        echo "Router.php not found"
    fi
}

# Main script logic
case "$1" in
    status)
        check_status
        ;;
    monitor)
        monitor_system
        ;;
    backup)
        backup_system
        ;;
    sync)
        sync_github
        ;;
    logs)
        view_logs
        ;;
    routes)
        list_routes
        ;;
    help|"")
        usage
        ;;
    *)
        echo "Unknown command: $1"
        usage
        exit 1
        ;;
esac
